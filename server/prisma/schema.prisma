// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
   previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:komak07884@localhost:3306/Dukan"
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  APPROVED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String
  password String
  defaultShippingAddress Int?
  defaultBillingAddress Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  role Role @default(USER)
  address Address[]
  cartItems CartItems[]
  orders Order[]

  @@map("users")
}

model Address {
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String
  city String
  country String
  pincode String
  userId Int
  user User @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("addresses")
}

// product model
model Product {
  id Int @id @default(autoincrement())
  name String
  description String @db.Text
  price Decimal
  tags String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cartItems CartItems[]
  orders OrderProduct[]

  @@fulltext([name, description, tags])

  @@map("products")
}


model CartItems {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt


  @@map("cart_items")
}


model Order {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  netAmount Decimal
  address String
  status OrderEventStatus @default(PENDING)
  products OrderProduct[]
  events OrderEvents[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("orders")
}

model OrderProduct {
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("order_products")
}


model OrderEvents {
  id Int @id @default(autoincrement())
  orderId Int 
  order Order @relation(fields: [orderId], references: [id])
  orderStatus OrderEventStatus @default(PENDING)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("order_events")
}